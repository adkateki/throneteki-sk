const DrawCard = require('../../drawcard.js');

class KingsBalonHost extends DrawCard {
    setupCardAbilities(ability) {
        this.persistentEffect({
            condition: () => this.controller.firstPlayer,
            match: this,
            effect: ability.effects.modifyStrength(2)
        });
        this.reaction({
            when: {
                onCardEntersPlay: event => event.card === this
            },
            handler: () => {
                if(this.game.anyPlotHasTrait('War')) {
                    context.player.moveCard(this, 'hand');
                }else{

		}
                this.game.promptForDeckSearch(this.controller, {
                    activePromptTitle: 'Select a character',
                    cardCondition: card => card.getType() === 'character' && (card.hasTrait('Mercenary') || card.hasTrait('Army')),
                    onSelect: (player, card) => this.cardSelected(card),
                    onCancel: () => this.doneSelecting(),
                    source: this
                });
            }
        });
    }
}

KingsBalonHost.code = '50040';

module.exports = KingsBalonHost;
const DrawCard = require('../../drawcard');

class AVeryLargeShadow extends DrawCard {
    setupCardAbilities(ability) {
        this.action({
            max: ability.limit.perPhase(1),
            message: '{player} plays {source} to reduce the cost of the next card {player} brings out of shadows this phase by 3.',
            handler: context => {
                this.untilEndOfPhase(ability => ({
                    targetController: 'current',
                    effect: ability.effects.reduceNextOutOfShadowsCardCost(3)
                }));

                if(this.game.anyPlotHasTrait('Scheme')) {
                    this.game.addMessage('{0} uses {1} to return {1} to their hand instead of their discard pile', context.player, this);
                    context.player.moveCard(this, 'hand');
                }
            }
        });
    }
}

AVeryLargeShadow.code = '13090';

module.exports = AVeryLargeShadow;
const DrawCard = require('../../drawcard.js');

class TheTickler extends DrawCard {
    setupCardAbilities(ability) {
        this.action({
            title: 'Discard opponents top card',
            phase: 'dominance',
            chooseOpponent: true,
            cost: ability.costs.kneelSelf(),
            handler: context => {
                context.opponent.discardFromDraw(1, cards => {
                    let topCard = cards[0];
                    this.game.addMessage('{0} uses {1} to discard the top card of {2}\'s deck', this.controller, this, context.opponent);

                    this.game.promptForSelect(this.controller, {
                        activePromptTitle: 'Select a copy of ' + topCard.name,
                        source: this,
                        cardCondition: card => card.location === 'play area' && card.isCopyOf(topCard),
                        onSelect: (p, card) => this.onCardSelected(p, card)
                    });
                });
            }
        });
    }

    onCardSelected(player, card) {
        card.controller.discardCard(card);

        this.game.addMessage('{0} uses {1} to discard a copy of {2} from play', player, this, card);

        return true;
    }
}

TheTickler.code = '01088';

module.exports = TheTickler;
